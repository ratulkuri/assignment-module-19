// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  firstName    String    @db.VarChar(100)
  middleName   String?   @db.VarChar(100)
  lastName     String    @db.VarChar(100)
  mobile       String    @unique @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  password     String    @db.VarChar(100)
  admin        Boolean   @default(false)
  registeredAt DateTime  @default(now()) @db.Timestamp(0)
  lastLogin    DateTime? @db.Timestamp(0)
  createdAt    DateTime  @default(now()) @db.Timestamp(0)
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  orders   Order[]
  cart     Cart[]
  products Product[]
}

model Category {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title     String   @db.VarChar(100)
  metaTitle String?  @db.VarChar(100)
  slug      String   @unique @db.VarChar(100)
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Cart {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title      String   @db.VarChar(100)
  sessionId  String   @db.VarChar(100)
  token      String   @db.VarChar(100)
  status     String   @db.VarChar(100)
  firstName  String   @db.VarChar(100)
  middleName String?  @db.VarChar(100)
  lastName   String   @db.VarChar(100)
  mobile     String   @db.VarChar(100)
  email      String   @db.VarChar(100)
  city       String   @db.VarChar(100)
  country    String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  userId BigInt @db.UnsignedBigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Order {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title        String   @db.VarChar(100)
  token        String   @db.VarChar(100)
  subTotal     Int      @db.Int
  itemDiscount Int?     @db.Int
  tax          Int?     @db.Int
  discount     Int?     @db.Int
  grandTotal   Int      @db.Int
  firstName    String   @db.VarChar(100)
  middleName   String?  @db.VarChar(100)
  lastName     String   @db.VarChar(100)
  mobile       String   @db.VarChar(100)
  email        String   @db.VarChar(100)
  city         String   @db.VarChar(100)
  country      String   @db.VarChar(100)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  userId BigInt @db.UnsignedBigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Product {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  firstName   String    @db.VarChar(100)
  metaTitle   String    @db.VarChar(100)
  slug        String    @db.VarChar(100)
  summary     String    @db.VarChar(100)
  price       Int       @db.Int
  discount    Int?      @db.Int
  publishedAt DateTime? @db.Timestamp(0)
  startsAt    DateTime? @db.Timestamp(0)
  endsAt      DateTime? @db.Timestamp(0)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  userId BigInt @db.UnsignedBigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  productMeta   Product_Meta?
  productReview Product_Review[]
}

model Product_Meta {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  key       String   @db.VarChar(100)
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  productId BigInt  @unique @db.UnsignedBigInt
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Product_Review {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title     String   @db.VarChar(100)
  rating    String   @db.VarChar(100)
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  productId BigInt   @db.UnsignedBigInt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
